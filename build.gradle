buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {

    maven {
        // Required for JEI
        name 'progwml6'
        url 'http://dvs1.progwml6.com/files/maven'
    }

   /* maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }*/
}


ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


version = config.minecraft_version + "-" + config.mod_version
group = "com.nik7.upgcraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "UpgradeCraft"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"

    useDepAts = true

     mappings = config.mappings

    replaceIn "reference/Reference.java"
    replace "@MOD_VERSION@", "${config.mod_version}"

}

dependencies {

    deobfCompile "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version
    //deobfCompile "mcp.mobius.waila:Waila:" + config.waila_version
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            //inputs.property "version", project.version
            //inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'mod_version': project.version, 'minecraft_version': project.config.minecraft_version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
